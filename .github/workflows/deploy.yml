name: Deploy static content to Pages

on:
  push:
    branches: ['main']
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Node.js version
        id: node-version
        run: echo "node_version=$(node -v | cut -d'v' -f2)" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}-${{ steps.node-version.outputs.node_version }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}-
            ${{ runner.os }}-node-

  test:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}-${{ needs.prepare.outputs.node_version }}

      - name: Install dependencies (if cache missed)
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run tests and collect results
        run: |
          npm test
          # Если нужно сохранить сырые результаты тестов
          mkdir -p test-results
          cp ./allure-results/* test-results/ || echo "No test results"

      - name: Generate Allure report
        if: success()
        run: |
          npx allure generate ./allure-results -o ./build/allure-report

  build:
    needs: [prepare, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}-${{ needs.prepare.outputs.node_version }}

      - name: Install dependencies (if cache missed)
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build project
        run: npm run build:ci

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  notify:
    needs: [ test, build, deploy ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Compose error message
        id: compose
        run: |
          FAILED_JOBS=""
          if [[ "${{ needs.test.result }}" == "failure" ]]; then FAILED_JOBS+="Test❌ "; fi
          if [[ "${{ needs.build.result }}" == "failure" ]]; then FAILED_JOBS+="Build🚫 "; fi
          if [[ "${{ needs.deploy.result }}" == "failure" ]]; then FAILED_JOBS+="Deploy🛑"; fi
          
          MESSAGE="🚨 Workflow Failed: $GITHUB_WORKFLOW #$GITHUB_RUN_NUMBER%0A%0A"
          MESSAGE+="Failed stages: $FAILED_JOBS%0A"
          MESSAGE+="Repository: $GITHUB_REPOSITORY%0A"
          MESSAGE+="Commit: https://github.com/maksim-zakharov/smartmoney-client/commit/${GITHUB_SHA}%0A"
          MESSAGE+="View run: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          echo "has_errors=$([[ -n "$FAILED_JOBS" ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Send Telegram alert
        if: steps.compose.outputs.has_errors == 'true'
        run: |
          curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="${{ steps.compose.outputs.message }}" \
            -d parse_mode="HTML"